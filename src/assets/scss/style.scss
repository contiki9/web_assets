@charset "utf-8";
/*---------------------------------------------------------------------
# assets
-----------------------------------------------------------------------*/
/* mixIn
   ---------------------------------------------------------- */
@import "vendor/bourbon/bourbon";
@import "vendor/bourbon-neat/neat";
//@import "assets/vendor/dlex/dlex";
@import "vendor/dlex/mixin";
@import "mixin";

/* Framework
   ---------------------------------------------------------- */
@import "vendor/skeleton-scss/skeleton";

@import "vendor/uikit/variables";
@import "vendor/uikit/mixins";
@import "vendor/uikit/uikit";

/* Base
   ---------------------------------------------------------- */
@import "variable";
@import "mixin_theme";
@import "extend";

/* ==========================================================================
   Foundation
   ========================================================================== */
@import "foundation/foundation";

/* ==========================================================================
   Layout
   ========================================================================== */
/*---------------------------------------------------------------------
# layout
-----------------------------------------------------------------------*/
@import "layout/layout";

/* ==========================================================================
   Object
   ========================================================================== */
/*---------------------------------------------------------------------
# Component
-----------------------------------------------------------------------*/

@import "object/component/component";
/**
 * Componentレイヤーは多くのプロジェクトで横断的に再利用のできるような、小さな単位のモジュール（機能）です。
 * OOCSSの構造（structure）の機能を担うため、装飾的なスタイルをできるだけ含めないようにします。
 * また、`width`や`margin`といったレイアウトに影響を与えるプロパティもできるだけ含めないようにします。
 * 例えばgridやmediaといったレイアウトパターンが該当します。
 * プレフィックス（接頭辞）として`c-`をつけます。
 */

/*---------------------------------------------------------------------
# Project
-----------------------------------------------------------------------*/
/**
 * Projectレイヤーはプロジェクト固有のパターンで、複数のページで使い回せるようなコンポーネントです。
 * 具体的なスタイルを持つUI（ユーザーフェイス）で、追加されるコンポーネントのほとんどはこのレイヤーに置かれます。
 * もし、このレイヤーで同じパターンが3箇所で使われていたら、別のコンポーネントとしてまとめられないか検討しましょう。
 * プレフィックス（接頭辞）として`p-`をつけます。
 */
@import "object/project/project";



/*---------------------------------------------------------------------
# Scope
-----------------------------------------------------------------------*/
@import "object/scope/scope";

/**
 * ComponentレイヤーやProjectレイヤーのようなコンポーネント単位ではなく、
 * ページ単位や任意の範囲（スコープ）でのスタイルを定義します。1箇所でしか使わないような特異なスタイルや、
 * ページ単位でComponentやProjectレイヤーのスタイルを微調整したい場合に使用してもかまいません。
 * 例えばブログページのスタイルとして_blog.scssを作成します。
 * このレイヤーでは`.s-blog p`のような要素セレクタとの結合子も使うこともできます。
 * プレフィックス（接頭辞）として`s-`をつけます。
 */

/*---------------------------------------------------------------------
# Utility
-----------------------------------------------------------------------*/
/**
 * Utilityレイヤーはいわゆる汎用クラスで、ほとんどの場合は単一のスタイルをもっています。
 * コンポーネント間の間隔を調整したり、BEMのModifierが増えすぎるのを防ぎます。
 * `.mb10`のような具体的な名前より`.mb-small`のような相対的な名前にしたり、
 * pxよりもemや%で指定することを推奨します。
 * 確実にスタイルを適応させるために`!important`を使用します。
 * プレフィックス（接頭辞）として`u-`をつけます。
 */

@import "object/utility/utility";

/*---------------------------------------------------------------------
# JS
-----------------------------------------------------------------------*/
/**
 * JSを使ったオブジェクト
 * プレフィックス（接頭辞）として`js-`をつけます。
 */

@import "object/js/js";

/*---------------------------------------------------------------------
# Pulugin
-----------------------------------------------------------------------*/
//@import "vendor/*";



